import Series from "./series";
export declare function returnFrame(obj: Record<any, any>, data: Array<any>, headers: Array<any>, inPlace: boolean, callback: Function, meta?: Record<any, any>): void;
export declare function map(values: Record<any, any>, column: any, callback: Function, inPlace?: boolean): void;
export declare function head(len: number, callback: Function): void;
export declare function tail(len: number, callback: Function): void;
export declare function slice(start: number, end: number, callback: Function): void;
export declare function isNull(callback: Function, column?: undefined): void;
export declare function query(): any;
export declare function unique(column: any): any[];
export declare function getCol(column: string): Series;
export declare function rename(oldval: string, value: string, callback: Function): void;
export declare function drop(inPlace: boolean | undefined, callback: Function, ...values: Array<any>): void;
export declare function dropna(inPlace: boolean | undefined, callback: Function): void;
export declare function replace(toReplace: any, value: any, callback: Function, inPlace: false): void;
export declare function apply_along_axis(axis: number, fn: Function, where: string, callback: Function, inPlace?: boolean): void;
export declare function group_by(column: string, predicateFn: Function, callback: Function): void;
export declare function count(column: string): Record<any, any> | undefined;
export declare function resetIndex(callback: Function): void;
export declare function writeCsv(name: string): void;
//# sourceMappingURL=frameFuntions.d.ts.map