"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const frame_1 = __importDefault(require("./frame"));
let tableReadyCallback;
function dataFrame(file, tableReady, headers = []) {
    if (typeof file === "object") {
        readFile(file, headers);
        tableReadyCallback = tableReady;
    }
    else if (typeof file === "string") {
        // url
        fetchFile(file);
    }
}
exports.default = dataFrame;
function readFile(file, headers) {
    const work = new Worker("./workers/worker.js");
    let reader = new FileReader();
    reader.readAsText(file.files[0]);
    reader.onloadend = (e) => {
        var _a;
        let str = (_a = e === null || e === void 0 ? void 0 : e.currentTarget) === null || _a === void 0 ? void 0 : _a.result;
        work.postMessage({ data: str.split("\n"), headers });
    };
    work.onmessage = e => {
        // console.log("terminating worker", e.data)
        toTable(e.data);
        work.terminate();
        //   console.log("terminating worker")
    };
}
function fetchFile(url) {
    return __awaiter(this, void 0, void 0, function* () {
    });
}
function toTable(data) {
    // do everthing here to dereference [[]]
    // console.log(data)
    data.notNeeded = false;
    const work = new Worker("./workers/tableworker.js");
    work.postMessage({ data: data });
    work.onmessage = e => {
        let frame = new frame_1.default(e.data, data);
        //  console.log(frame)
        tableReadyCallback(frame);
        work.terminate();
    };
}
//# sourceMappingURL=dataFrame.js.map